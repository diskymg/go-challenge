// Package ocpi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package ocpi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AgAA//8aE2/cTUAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
