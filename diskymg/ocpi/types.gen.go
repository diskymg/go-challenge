// Package ocpi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package ocpi

import (
	"time"
)

// Defines values for Capability.
const (
	CHARGINGPREFERENCESCAPABLE    Capability = "CHARGING_PREFERENCES_CAPABLE"
	CHARGINGPROFILECAPABLE        Capability = "CHARGING_PROFILE_CAPABLE"
	CHIPCARDSUPPORT               Capability = "CHIP_CARD_SUPPORT"
	CONTACTLESSCARDSUPPORT        Capability = "CONTACTLESS_CARD_SUPPORT"
	CREDITCARDPAYABLE             Capability = "CREDIT_CARD_PAYABLE"
	DEBITCARDPAYABLE              Capability = "DEBIT_CARD_PAYABLE"
	PEDTERMINAL                   Capability = "PED_TERMINAL"
	REMOTESTARTSTOPCAPABLE        Capability = "REMOTE_START_STOP_CAPABLE"
	RESERVABLE                    Capability = "RESERVABLE"
	RFIDREADER                    Capability = "RFID_READER"
	STARTSESSIONCONNECTORREQUIRED Capability = "START_SESSION_CONNECTOR_REQUIRED"
	TOKENGROUPCAPABLE             Capability = "TOKEN_GROUP_CAPABLE"
	UNLOCKCAPABLE                 Capability = "UNLOCK_CAPABLE"
)

// Defines values for ConnectorFormat.
const (
	CABLE  ConnectorFormat = "CABLE"
	SOCKET ConnectorFormat = "SOCKET"
)

// Defines values for ConnectorType.
const (
	CHADEMO            ConnectorType = "CHADEMO"
	CHAOJI             ConnectorType = "CHAOJI"
	DOMESTICA          ConnectorType = "DOMESTIC_A"
	DOMESTICB          ConnectorType = "DOMESTIC_B"
	DOMESTICC          ConnectorType = "DOMESTIC_C"
	DOMESTICD          ConnectorType = "DOMESTIC_D"
	DOMESTICE          ConnectorType = "DOMESTIC_E"
	DOMESTICF          ConnectorType = "DOMESTIC_F"
	DOMESTICG          ConnectorType = "DOMESTIC_G"
	DOMESTICH          ConnectorType = "DOMESTIC_H"
	DOMESTICI          ConnectorType = "DOMESTIC_I"
	DOMESTICJ          ConnectorType = "DOMESTIC_J"
	DOMESTICK          ConnectorType = "DOMESTIC_K"
	DOMESTICL          ConnectorType = "DOMESTIC_L"
	DOMESTICM          ConnectorType = "DOMESTIC_M"
	DOMESTICN          ConnectorType = "DOMESTIC_N"
	DOMESTICO          ConnectorType = "DOMESTIC_O"
	GBTAC              ConnectorType = "GBT_AC"
	GBTDC              ConnectorType = "GBT_DC"
	IEC603092Single16  ConnectorType = "IEC_60309_2_single_16"
	IEC603092Three16   ConnectorType = "IEC_60309_2_three_16"
	IEC603092Three32   ConnectorType = "IEC_60309_2_three_32"
	IEC603092Three64   ConnectorType = "IEC_60309_2_three_64"
	IEC62196T1         ConnectorType = "IEC_62196_T1"
	IEC62196T1COMBO    ConnectorType = "IEC_62196_T1_COMBO"
	IEC62196T2         ConnectorType = "IEC_62196_T2"
	IEC62196T2COMBO    ConnectorType = "IEC_62196_T2_COMBO"
	IEC62196T3A        ConnectorType = "IEC_62196_T3A"
	IEC62196T3C        ConnectorType = "IEC_62196_T3C"
	NEMA1030           ConnectorType = "NEMA_10_30"
	NEMA1050           ConnectorType = "NEMA_10_50"
	NEMA1430           ConnectorType = "NEMA_14_30"
	NEMA1450           ConnectorType = "NEMA_14_50"
	NEMA520            ConnectorType = "NEMA_5_20"
	NEMA630            ConnectorType = "NEMA_6_30"
	NEMA650            ConnectorType = "NEMA_6_50"
	PANTOGRAPHBOTTOMUP ConnectorType = "PANTOGRAPH_BOTTOM_UP"
	PANTOGRAPHTOPDOWN  ConnectorType = "PANTOGRAPH_TOP_DOWN"
	TESLAR             ConnectorType = "TESLA_R"
	TESLAS             ConnectorType = "TESLA_S"
)

// Defines values for EnergySourceCategory.
const (
	COAL          EnergySourceCategory = "COAL"
	GAS           EnergySourceCategory = "GAS"
	GENERALFOSSIL EnergySourceCategory = "GENERAL_FOSSIL"
	GENERALGREEN  EnergySourceCategory = "GENERAL_GREEN"
	NUCLEAR       EnergySourceCategory = "NUCLEAR"
	SOLAR         EnergySourceCategory = "SOLAR"
	WATER         EnergySourceCategory = "WATER"
	WIND          EnergySourceCategory = "WIND"
)

// Defines values for EnvironmentalImpactCategory.
const (
	CARBONDIOXIDE EnvironmentalImpactCategory = "CARBON_DIOXIDE"
	NUCLEARWASTE  EnvironmentalImpactCategory = "NUCLEAR_WASTE"
)

// Defines values for Facility.
const (
	FacilityAIRPORT        Facility = "AIRPORT"
	FacilityBIKESHARING    Facility = "BIKE_SHARING"
	FacilityBUSSTOP        Facility = "BUS_STOP"
	FacilityCAFE           Facility = "CAFE"
	FacilityCARPOOLPARKING Facility = "CARPOOL_PARKING"
	FacilityFUELSTATION    Facility = "FUEL_STATION"
	FacilityHOTEL          Facility = "HOTEL"
	FacilityMALL           Facility = "MALL"
	FacilityMETROSTATION   Facility = "METRO_STATION"
	FacilityMUSEUM         Facility = "MUSEUM"
	FacilityNATURE         Facility = "NATURE"
	FacilityPARKINGLOT     Facility = "PARKING_LOT"
	FacilityRECREATIONAREA Facility = "RECREATION_AREA"
	FacilityRESTAURANT     Facility = "RESTAURANT"
	FacilitySPORT          Facility = "SPORT"
	FacilitySUPERMARKET    Facility = "SUPERMARKET"
	FacilityTAXISTAND      Facility = "TAXI_STAND"
	FacilityTRAINSTATION   Facility = "TRAIN_STATION"
	FacilityTRAMSTOP       Facility = "TRAM_STOP"
	FacilityWIFI           Facility = "WIFI"
)

// Defines values for ImageCategory.
const (
	CHARGER  ImageCategory = "CHARGER"
	ENTRANCE ImageCategory = "ENTRANCE"
	LOCATION ImageCategory = "LOCATION"
	NETWORK  ImageCategory = "NETWORK"
	OPERATOR ImageCategory = "OPERATOR"
	OTHER    ImageCategory = "OTHER"
	OWNER    ImageCategory = "OWNER"
)

// Defines values for ParkingRestriction.
const (
	CUSTOMERS   ParkingRestriction = "CUSTOMERS"
	DISABLED    ParkingRestriction = "DISABLED"
	EVONLY      ParkingRestriction = "EV_ONLY"
	MOTORCYCLES ParkingRestriction = "MOTORCYCLES"
	PLUGGED     ParkingRestriction = "PLUGGED"
)

// Defines values for ParkingType.
const (
	ParkingTypeALONGMOTORWAY     ParkingType = "ALONG_MOTORWAY"
	ParkingTypeONDRIVEWAY        ParkingType = "ON_DRIVEWAY"
	ParkingTypeONSTREET          ParkingType = "ON_STREET"
	ParkingTypePARKINGGARAGE     ParkingType = "PARKING_GARAGE"
	ParkingTypePARKINGLOT        ParkingType = "PARKING_LOT"
	ParkingTypeUNDERGROUNDGARAGE ParkingType = "UNDERGROUND_GARAGE"
)

// Defines values for PowerType.
const (
	AC1PHASE      PowerType = "AC_1_PHASE"
	AC2PHASE      PowerType = "AC_2_PHASE"
	AC2PHASESPLIT PowerType = "AC_2_PHASE_SPLIT"
	AC3PHASE      PowerType = "AC_3_PHASE"
	DC            PowerType = "DC"
)

// Defines values for Status.
const (
	AVAILABLE   Status = "AVAILABLE"
	BLOCKED     Status = "BLOCKED"
	CHARGING    Status = "CHARGING"
	INOPERATIVE Status = "INOPERATIVE"
	OUTOFORDER  Status = "OUTOFORDER"
	PLANNED     Status = "PLANNED"
	REMOVED     Status = "REMOVED"
	RESERVED    Status = "RESERVED"
	UNKNOWN     Status = "UNKNOWN"
)

// AdditionalGeoLocation defines model for AdditionalGeoLocation.
type AdditionalGeoLocation struct {
	Latitude  string       `json:"latitude"`
	Longitude string       `json:"longitude"`
	Name      *DisplayText `json:"name,omitempty"`
}

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Data * or ?
	// Contains the actual response data object or list of objects from each request, depending on the cardinality of the response data, this is an array (card. * or +), or a single object (card. 1 or ?)
	Data          *interface{} `json:"data,omitempty"`
	StatusCode    int          `json:"status_code"`
	StatusMessage *string      `json:"status_message,omitempty"`

	// Timestamp All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	Timestamp DateTime `json:"timestamp"`
}

// BusinessDetails defines model for BusinessDetails.
type BusinessDetails struct {
	Logo *Image `json:"logo,omitempty"`

	// Name Name of the operator.
	Name    string `json:"name"`
	Website *URL   `json:"website,omitempty"`
}

// Capability The capability of an EVSE.
type Capability string

// Connector defines model for Connector.
type Connector struct {
	Format ConnectorFormat `json:"format"`
	Id     string          `json:"id"`

	// LastUpdated All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	LastUpdated        DateTime      `json:"last_updated"`
	MaxAmperage        int           `json:"max_amperage"`
	MaxElectricPower   *int          `json:"max_electric_power,omitempty"`
	MaxVoltage         int           `json:"max_voltage"`
	PowerType          PowerType     `json:"power_type"`
	Standard           ConnectorType `json:"standard"`
	TariffIds          *[]string     `json:"tariff_ids,omitempty"`
	TermsAndConditions *URL          `json:"terms_and_conditions,omitempty"`
}

// ConnectorFormat defines model for ConnectorFormat.
type ConnectorFormat string

// ConnectorType defines model for ConnectorType.
type ConnectorType string

// CountryCode ISO-3166 alpha-2 country code
type CountryCode = string

// DateTime All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
// used.
// NOTE that +00:00 is not the same as UTC.
// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
type DateTime = time.Time

// DisplayText defines model for DisplayText.
type DisplayText struct {
	// Language Language Code ISO 639-1.
	Language string `json:"language"`

	// Text Text to be displayed to a end user. No markup, html etc. allowed.
	Text string `json:"text"`
}

// EVSE defines model for EVSE.
type EVSE struct {
	Capabilities        *[]Capability         `json:"capabilities,omitempty"`
	Connectors          []Connector           `json:"connectors"`
	Coordinates         *GeoLocation          `json:"coordinates,omitempty"`
	Directions          *[]DisplayText        `json:"directions,omitempty"`
	EvseId              *string               `json:"evse_id,omitempty"`
	FloorLevel          *string               `json:"floor_level,omitempty"`
	Images              *[]Image              `json:"images,omitempty"`
	LastUpdated         time.Time             `json:"last_updated"`
	ParkingRestrictions *[]ParkingRestriction `json:"parking_restrictions,omitempty"`
	PhysicalReference   *string               `json:"physical_reference,omitempty"`

	// Status The status of an EVSE.
	Status         Status            `json:"status"`
	StatusSchedule *[]StatusSchedule `json:"status_schedule,omitempty"`
	Uid            string            `json:"uid"`
}

// EnergyMix EnergyMix class
type EnergyMix struct {
	EnergyProductName *string                `json:"energy_product_name,omitempty"`
	EnergySources     *[]EnergySource        `json:"energy_sources,omitempty"`
	EnvironImpact     *[]EnvironmentalImpact `json:"environ_impact,omitempty"`
	IsGreenEnergy     bool                   `json:"is_green_energy"`
	SupplierName      *string                `json:"supplier_name,omitempty"`
}

// EnergySource EnergySource class
type EnergySource struct {
	Percentage float32 `json:"percentage"`

	// Source EnergySourceCategory enum
	Source EnergySourceCategory `json:"source"`
}

// EnergySourceCategory EnergySourceCategory enum
type EnergySourceCategory string

// EnvironmentalImpact EnvironmentalImpact class
type EnvironmentalImpact struct {
	Amount float32 `json:"amount"`

	// Category EnvironmentalImpactCategory enum
	Category EnvironmentalImpactCategory `json:"category"`
}

// EnvironmentalImpactCategory EnvironmentalImpactCategory enum
type EnvironmentalImpactCategory string

// ExceptionalPeriod ExceptionalPeriod class
type ExceptionalPeriod struct {
	// PeriodBegin All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	PeriodBegin DateTime `json:"period_begin"`

	// PeriodEnd All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	PeriodEnd DateTime `json:"period_end"`
}

// Facility Facility enum
type Facility string

// GeoLocation defines model for GeoLocation.
type GeoLocation struct {
	Latitude  string `json:"latitude"`
	Longitude string `json:"longitude"`
}

// Hours Hours class
type Hours struct {
	// ExceptionalClosings ExceptionalPeriod class
	ExceptionalClosings *ExceptionalPeriod `json:"exceptional_closings,omitempty"`

	// ExceptionalOpenings ExceptionalPeriod class
	ExceptionalOpenings *ExceptionalPeriod `json:"exceptional_openings,omitempty"`
	RegularHours        *[]RegularHours    `json:"regular_hours,omitempty"`
	Twentyfourseven     bool               `json:"twentyfourseven"`
}

// Image defines model for Image.
type Image struct {
	Category  ImageCategory `json:"category"`
	Height    *int          `json:"height,omitempty"`
	Thumbnail *URL          `json:"thumbnail,omitempty"`

	// Type Image type like: gif, jpeg, png, svg.
	Type  string `json:"type"`
	Url   URL    `json:"url"`
	Width *int   `json:"width,omitempty"`
}

// ImageCategory defines model for ImageCategory.
type ImageCategory string

// Location defines model for Location.
type Location struct {
	Address            string      `json:"address"`
	ChargingWhenClosed *bool       `json:"charging_when_closed,omitempty"`
	City               string      `json:"city"`
	Coordinates        GeoLocation `json:"coordinates"`
	Country            string      `json:"country"`

	// CountryCode ISO-3166 alpha-2 country code
	CountryCode CountryCode    `json:"country_code"`
	Directions  *[]DisplayText `json:"directions,omitempty"`

	// EnergyMix EnergyMix class
	EnergyMix  *EnergyMix  `json:"energy_mix,omitempty"`
	Evses      *[]EVSE     `json:"evses,omitempty"`
	Facilities *[]Facility `json:"facilities,omitempty"`
	Id         string      `json:"id"`
	Images     *[]Image    `json:"images,omitempty"`

	// LastUpdated All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	LastUpdated DateTime `json:"last_updated"`
	Name        *string  `json:"name,omitempty"`

	// OpeningTimes Hours class
	OpeningTimes *Hours           `json:"opening_times,omitempty"`
	Operator     *BusinessDetails `json:"operator,omitempty"`
	Owner        *BusinessDetails `json:"owner,omitempty"`
	ParkingType  *[]ParkingType   `json:"parking_type,omitempty"`

	// PartyId ID of the CPO (following the ISO-15118 standard).
	PartyId          PartyID                  `json:"party_id"`
	PostalCode       *string                  `json:"postal_code,omitempty"`
	Publish          bool                     `json:"publish"`
	PublishAllowedTo *[]string                `json:"publish_allowed_to,omitempty"`
	RelatedLocations *[]AdditionalGeoLocation `json:"related_locations,omitempty"`
	State            *string                  `json:"state,omitempty"`
	Suboperator      *BusinessDetails         `json:"suboperator,omitempty"`
	TimeZone         string                   `json:"time_zone"`
}

// ParkingRestriction defines model for ParkingRestriction.
type ParkingRestriction string

// ParkingType defines model for ParkingType.
type ParkingType string

// PartyID ID of the CPO (following the ISO-15118 standard).
type PartyID = string

// PowerType defines model for PowerType.
type PowerType string

// RegularHours RegularHours class
type RegularHours struct {
	PeriodBegin string `json:"period_begin"`
	PeriodEnd   string `json:"period_end"`

	// Weekday Number of day in the week, from Monday (1) till Sunday (7)
	Weekday int `json:"weekday"`
}

// Status The status of an EVSE.
type Status string

// StatusSchedule defines model for StatusSchedule.
type StatusSchedule struct {
	// PeriodBegin All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	PeriodBegin DateTime `json:"period_begin"`

	// PeriodEnd All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	PeriodEnd *DateTime `json:"period_end,omitempty"`

	// Status The status of an EVSE.
	Status Status `json:"status"`
}

// URL defines model for URL.
type URL = string

// BadRequest defines model for BadRequest.
type BadRequest = BaseResponse

// LocationsResponse defines model for LocationsResponse.
type LocationsResponse struct {
	Data          *[]Location `json:"data,omitempty"`
	StatusCode    int         `json:"status_code"`
	StatusMessage *string     `json:"status_message,omitempty"`

	// Timestamp All timestamps are formatted as string(25) following RFC 3339, with some additional limitations.
	// All timestamps SHALL be in UTC. The absence of the timezone designator implies a UTC timestamp. Fractional seconds MAY be
	// used.
	// NOTE that +00:00 is not the same as UTC.
	// Example of how timestamps shall be formatted in OCPI, other formats/patterns are not allowed:
	Timestamp DateTime `json:"timestamp"`
}

// GetLocationsParams defines parameters for GetLocations.
type GetLocationsParams struct {
	DateFrom *DateTime `form:"date_from,omitempty" json:"date_from,omitempty"`
	DateTo   *DateTime `form:"date_to,omitempty" json:"date_to,omitempty"`
	Offset   *int      `form:"offset,omitempty" json:"offset,omitempty"`
	Limit    *int      `form:"limit,omitempty" json:"limit,omitempty"`
}
